#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <cmath>
#include "nonogram.hpp"

using namespace std;

vector<int> split(const string& str, int delimiter(int) = ::isspace) {
    vector<int> result;
    auto e = str.end();
    auto i = str.begin();
    while (i != e) {
        i = find_if_not(i, e, delimiter);
        if (i == e) break;
        auto j = find_if(i, e, delimiter);
        result.push_back(stoi(string(i,j)));
        i = j;
    }
    return result;
}

long long int factorial(int n) {
    if (n == 1 || n == 0) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

long long int combinationRepeatedNum(int n, int m) {
    return factorial(n + m - 1) / factorial(m) / factorial(n - 1);
}

void combinationRepeatedList(int* set, int set_size, int n, int m, int index, string* returnValue) {
    if (set_size == m) {
        for (int i = 0; i < m; i++) {
            *returnValue += to_string(set[i]);
        }
        *returnValue += "\n";
        return;
    } 
    if (index == n) {
        return;
    }

    set[set_size] = index;
    combinationRepeatedList(set, set_size + 1, n, m, index, returnValue);
    combinationRepeatedList(set, set_size, n, m, index + 1, returnValue);
}

int main(int argc, char** argv) {
    if (argc != 2) {
        cout << "error... ./nonogram <filename>" << endl;
        return 0;
    }

    string line;
    string filename(argv[1]);
    vector< vector<int> > rows;
    vector< vector<int> > columns;
    vector< vector<int> > spaced_rows;
    vector< vector<int> > spaced_columns;
    string Xs_list;
    vector<string> Xs_vector_string;
    string splited;
    string formula;
    string formula_row;
    string formula_column;
    vector<string> clauses;
    vector<int> Xs_vector_int;
    ifstream inf(filename.c_str());
    getline(inf, line);
    int num_row = stoi(line);
    getline(inf, line);
    int num_column = stoi(line);

    for (int i = 0; i < num_row; i++) {
        getline(inf, line);
        rows.push_back(split(line));
    }
    for (int i = 0; i < num_column; i++) {
        getline(inf, line);
        columns.push_back(split(line));
    }
    inf.close();

    for (auto row:rows) {
        vector<int> vec;
        for (auto i:row) {
            vec.push_back(i + 1);
        }
        vec.back() = vec.back() - 1;
        spaced_rows.push_back(vec);
    }

    for (auto column:columns) {
        vector<int> vec;
        for (auto i:column) {
            vec.push_back(i + 1);
        }
        vec.back() = vec.back() - 1;
        spaced_columns.push_back(vec);
    }

    Xs_list = "";
    for (auto row:spaced_rows) {
        int num_space_available = row.size() + 1;
        int num_Xs = columns.size();
        for (auto i:row) {
            num_Xs -= i;
        }
        int* set = (int*)malloc(sizeof(int) * num_Xs);
        string Xs = "";
        combinationRepeatedList(set, 0, num_space_available, num_Xs, 0, &Xs);
        Xs_list += Xs;
        Xs_vector_int.push_back(num_Xs);
    }
    Xs_list += "\n";

    auto e = Xs_list.end();
    auto i = Xs_list.begin();
    while (i != e) {
        i = find_if_not(i, e, [](char c) {return c == '\n';});
        if (i == e) break;
        auto j = find_if(i, e, [](char c) {return c == '\n';});
        splited = string(i,j);
        i = j;
        Xs_vector_string.push_back(splited);
    }

    for (int i = 0, j = 0; i < spaced_rows.size(); i++) {
        vector<int> row = spaced_rows[i];
        vector<string> lines;
        int base = i * columns.size();
        for (long long int num = 0; num < combinationRepeatedNum(row.size() + 1, Xs_vector_int[i]); num++) {
            int current_cursor = 1 + base;
            string Xs = Xs_vector_string[j];
            for (int k = 0; k < row.size(); k++) {
                for (int l = 0; l < Xs_vector_int[i]; l++) {
                    if ((int)(Xs.c_str()[l]) - 48 > k) {
                        break;
                    }
                    if ((int)(Xs.c_str()[l]) - 48 < k) {
                        continue;
                    }
                    current_cursor += 1;
                }
                if (k == row.size() - 1) {
                    if (lines.size() == num) {
                        lines.push_back("");
                        for (int l = 0; l < row[k]; l++) {
                            if (rows[i][k] != row[k] && l == row[k] - 2) {
                                lines[num] = lines[num] + to_string(current_cursor) + " ";
                                current_cursor++;
                            } else if (l == 0 && row[k] == 1) {
                                lines[num] = to_string(current_cursor) + " ";
                                current_cursor++;
                            } else if (row[k] == 1) {
                                lines[num] = lines[num] + to_string(current_cursor) + " ";
                                current_cursor++;
                            } else if (l != row[k] - 1) {
                                lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                current_cursor++;
                            } else if (rows[i][k] == row[k] && l == row[k] - 1) {
                                lines[num] = lines[num] + to_string(current_cursor) + " ";
                                current_cursor++;
                            } else {
                                lines[num] = lines[num] + to_string(current_cursor) + " ";
                                current_cursor++;
                            }
                        }
                    } else {
                        for (int l = 0; l < row[k]; l++) {
                            if (rows[i][k] != row[k] && l == row[k] - 2) {
                                lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                current_cursor++;
                            } else if (l == 0 && row[k] == 1) {
                                lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                current_cursor++;
                            } else if (row[k] == 1) {
                                lines[num] = lines[num] + to_string(current_cursor) + " ";
                                current_cursor++;
                            } else if (l != row[k] - 1) {
                                lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                current_cursor++;
                            } else if (rows[i][k] == row[k] && l == row[k] - 1) {
                                lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                current_cursor++;                            
                            } else {
                                lines[num] = lines[num] + to_string(current_cursor) + " ";
                                current_cursor++;                                
                            }
                        }
                    }
                } else {
                    if (lines.size() == num) {
                        lines.push_back("");
                        for (int l = 0; l < row[k]; l++) {
                            if (rows[i][k] != row[k] && l == row[k] - 2) {
                                lines[num] = lines[num] + to_string(current_cursor) + " ";
                                current_cursor++;
                            } else if (l == 0 && l == row[k] - 1) {
                                lines[num] = to_string(current_cursor) + " ";
                                current_cursor++;
                            } else if (row[k] == 1) {
                                lines[num] = lines[num] + to_string(current_cursor) + " ";
                                current_cursor++;
                            } else if (l != row[k] - 1) {
                                lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                current_cursor++;
                            } else if (rows[i][k] == row[k] && l == row[k] - 1) {
                                lines[num] = lines[num] + to_string(current_cursor) + " ";
                                current_cursor++;
                            } else {
                                current_cursor++;
                            }
                        }
                    } else {
                        for (int l = 0; l < row[k]; l++) {
                            if (l == 0) {
                                if (rows[i][k] != row[k] && l == row[k] - 2) {
                                    lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                    current_cursor++;
                                } else if (l != row[k] - 1) {
                                    lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                    current_cursor++;
                                } else if (rows[i][k] == row[k] && l == row[k] - 1) {
                                    lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                    current_cursor++;
                                } else {
                                    lines[num] = lines[num] + to_string(current_cursor) + " ";
                                    current_cursor++;
                                }
                            } else if (rows[i][k] != row[k] && l == row[k] - 2) {
                                lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                current_cursor++;
                            } else if (l != row[k] - 1) {
                                lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                current_cursor++;
                            } else if (rows[i][k] == row[k] && l == row[k] - 1) {
                                lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                current_cursor++;
                            } else {
                                current_cursor++;
                            }
                        }
                    }
                }
            }
            j++;
        }
        for (int k = 0; k < lines.size(); k++) {
            if (k == 0) {
                clauses.push_back("");
                clauses[i] = lines[k].substr(0, lines[k].length() - 1);
            } else {
                clauses[i] = "| " + clauses[i] + " " + lines[k].substr(0, lines[k].length() - 1);
            }
        }
    }
    
    for (int i = 0; i < clauses.size(); i++) {
        if (i == 0) {
            formula_row = clauses[i];
        } else {
            formula_row = "& " + formula_row + " " + clauses[i];
        }
    }

    Xs_list = "";
    clauses.clear();
    Xs_vector_int.clear();
    Xs_vector_string.clear();

    for (auto column:spaced_columns) {
        int num_space_available = column.size() + 1;
        int num_Xs = rows.size();
        for (auto i:column) {
            num_Xs -= i;
        }
        int* set = (int*)malloc(sizeof(int) * num_Xs);
        string Xs = "";
        combinationRepeatedList(set, 0, num_space_available, num_Xs, 0, &Xs);
        Xs_list += Xs;
        Xs_vector_int.push_back(num_Xs);
    }
    Xs_list += "\n";
    
    e = Xs_list.end();
    i = Xs_list.begin();
    while (i != e) {
        i = find_if_not(i, e, [](char c) {return c == '\n';});
        if (i == e) break;
        auto j = find_if(i, e, [](char c) {return c == '\n';});
        splited = string(i,j);
        i = j;
        Xs_vector_string.push_back(splited);
    }

    for (int i = 0, j = 0; i < spaced_columns.size(); i++) {
        vector<int> column = spaced_columns[i];
        vector<string> lines;
        int base = i;
        for (long long int num = 0; num < combinationRepeatedNum(column.size() + 1, Xs_vector_int[i]); num++) {
            int current_cursor = 1 + i;
            string Xs = Xs_vector_string[j];
            for (int k = 0; k < column.size(); k++) {
                for (int l = 0; l < Xs_vector_int[i]; l++) {
                    if ((int)(Xs.c_str()[l]) - 48 > k) {
                        break;
                    }
                    if ((int)(Xs.c_str()[l]) - 48 < k) {
                        continue;
                    }
                    current_cursor += columns.size();
                }
                if (k == column.size() - 1) {
                    if (lines.size() == num) {
                        lines.push_back("");
                        for (int l = 0; l < column[k]; l++) {
                            if (columns[i][k] != column[k] && l == column[k] - 2) {
                                lines[num] = lines[num] + to_string(current_cursor) + " ";
                                current_cursor += columns.size();
                            } else if (l == 0 && column[k] == 1) {
                                lines[num] = to_string(current_cursor) + " ";
                                current_cursor += columns.size();
                            } else if (column[k] == 1) {
                                lines[num] = lines[num] + to_string(current_cursor) + " ";
                                current_cursor += columns.size();
                            } else if (l != column[k] - 1) {
                                lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                current_cursor += columns.size();
                            } else if (columns[i][k] == column[k] && l == column[k] - 1) {
                                lines[num] = lines[num] + to_string(current_cursor) + " ";
                                current_cursor += columns.size();                            
                            } else {
                                lines[num] = lines[num] + to_string(current_cursor) + " ";
                                current_cursor += columns.size();                                
                            }
                        }
                    } else {
                        for (int l = 0; l < column[k]; l++) {
                            if (columns[i][k] != column[k] && l == column[k] - 2) {
                                lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                current_cursor += columns.size();
                            } else if (l == 0 && column[k] == 1) {
                                lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                current_cursor += columns.size();
                            } else if (column[k] == 1) {
                                lines[num] = lines[num] + to_string(current_cursor) + " ";
                                current_cursor += columns.size();
                            } else if (l != column[k] - 1) {
                                lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                current_cursor += columns.size();
                            } else if (columns[i][k] == column[k] && l == column[k] - 1) {
                                lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                current_cursor += columns.size();                            
                            } else {
                                lines[num] = lines[num] + to_string(current_cursor) + " ";
                                current_cursor += columns.size();                                
                            }
                        }
                    }
                } else {
                    if (lines.size() == num) {
                        lines.push_back("");
                        for (int l = 0; l < column[k]; l++) {
                            if (columns[i][k] != column[k] && l == column[k] - 2) {
                                lines[num] = lines[num] + to_string(current_cursor) + " ";
                                current_cursor += columns.size();
                            } else if (l == 0 && l == column[k] - 1) {
                                lines[num] = to_string(current_cursor) + " ";
                                current_cursor += columns.size();
                            } else if (column[k] == 1) {
                                lines[num] = lines[num] + to_string(current_cursor) + " ";
                                current_cursor += columns.size();
                            } else if (l != column[k] - 1) {
                                lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                current_cursor += columns.size();
                            } else if (columns[i][k] == column[k] && l == column[k] - 1) {
                                lines[num] = lines[num] + to_string(current_cursor) + " ";
                                current_cursor += columns.size();
                            } else {
                                current_cursor += columns.size();
                            }
                        }
                    } else {
                        for (int l = 0; l < column[k]; l++) {
                            if (l == 0) {
                                if (columns[i][k] != column[k] && l == column[k] - 2) {
                                    lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                    current_cursor += columns.size();
                                } else if (l != column[k] - 1) {
                                    lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                    current_cursor += columns.size();
                                } else if (columns[i][k] == column[k] && l == column[k] - 1) {
                                    lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                    current_cursor += columns.size();
                                } else {
                                    lines[num] = lines[num] + to_string(current_cursor) + " ";
                                    current_cursor += columns.size();
                                }
                            } else if (columns[i][k] != column[k] && l == column[k] - 2) {
                                lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                current_cursor += columns.size();
                            } else if (l != column[k] - 1) {
                                lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                current_cursor += columns.size();
                            } else if (columns[i][k] == column[k] && l == column[k] - 1) {
                                lines[num] = "& " + lines[num] + to_string(current_cursor) + " ";
                                current_cursor += columns.size();
                            } else {
                                current_cursor += columns.size();                            
                            }
                        }
                    }
                }
            }
            j++;
        }
        for (int k = 0; k < lines.size(); k++) {
            if (k == 0) {
                clauses.push_back("");
                clauses[i] = lines[k].substr(0, lines[k].length() - 1);
            } else {
                clauses[i] = "| " + clauses[i] + " " + lines[k].substr(0, lines[k].length() - 1);
            }
        }
    }
    for (int i = 0; i < clauses.size(); i++) {
        if (i == 0) {
            formula_column = clauses[i];
        } else {
            formula_column = "& " + formula_column + " " + clauses[i];
        }
    }

    formula = "& " + formula_row + " " + formula_column;
    ofstream outf("nonogram_parse.txt");    
    outf << formula << endl;
    outf.close();


    return 0;
}